name: tojet-project
networks:
  tojet_network:
    driver: bridge

volumes:
  postgres_data: null
  rabbitmq_data: null
  redis_data: null
  minio_data: null

services:

  # PostgreSQL database
  postgres:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: tojet_db
    networks:
      - tojet_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django application
  django:
    build:
      context: .
    container_name: django_app
    command: ["/entrypoint.sh"]
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres_db
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=your_password
      - DB_DATABASE=tojet_db
      - REDIS_HOST=redis
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tojet_network

  # Celery worker
  celery_worker:
    build:
      context: .
    container_name: celery_worker
    command: celery -A tojet worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
      - django
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
    networks:
      - tojet_network
    healthcheck:
      test: ["CMD-SHELL", "celery -A tojet inspect ping | grep -q pong"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Celery Beat
  celery_beat:
    build:
      context: .
    container_name: celery_beat
    command: celery -A tojet beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
      - django
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
    networks:
      - tojet_network

  # Flower for monitoring Celery tasks
  flower:
    image: mher/flower:latest
    container_name: flower
    command: celery --broker=redis://redis:6379/0 flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - tojet_network

  # Redis for caching
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    networks:
      - tojet_network
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    platform: linux/amd64
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8585:8081"  # Expose Redis Commander UI on port 8585
    depends_on:
      - redis
    restart: always
    networks:
      - tojet_network

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"  # MinIO API port
      - "9001:9001"  # MinIO Web UI port
    volumes:
      - minio_data:/data
    networks:
      - tojet_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
