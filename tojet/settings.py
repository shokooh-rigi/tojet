"""
Django settings for tojet project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
from django.utils.translation import gettext_lazy as _

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-e2g_xhxv%l*_mop=_dg97)1icl#_i^7_j@@a!ec##ui(4%4t!i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', True)
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'users',
    'lessons',
    'exam_tests',
    'wallet',
    'gamification',
    'social',
    'notifications',
    'analytics',
    'referrals',
    'ai_integration',
    'goals',
    'review',

    "rest_framework",
    "drf_yasg",
    "corsheaders",
    "django_ratelimit",
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tojet.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tojet.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME', 'tojet_db'),
        'USER': os.getenv('DATABASE_USER', 'postgres'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD', 'your_password'),
        'HOST': os.getenv('DATABASE_HOST', 'postgres_db'),
        'PORT': os.getenv('DATABASE_PORT', 5432),
    }
}
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',  # Update with your Redis server details
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en'
TIME_ZONE = 'Asia/Tehran'
USE_I18N = True
USE_L10N = True
USE_TZ = True
LANGUAGES = [
    ('fa', _('Persian')),
    ('en', _('English')),
]
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'users.CustomUser'

# cors config
CORS_ALLOW_ALL_ORIGINS = True
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # React frontend
#     "http://127.0.0.1:3000",
#     "https://tojettest.ir",
# ]
CORS_ALLOW_CREDENTIALS = True

PAGE_SIZE :int = os.getenv('PAGE_SIZE', 15)
MAX_PAGE_SIZE :int = os.getenv('MAX_PAGE_SIZE', 50)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.BasicAuthentication',  # ✅ Enables Basic Authentication
        'rest_framework.authentication.SessionAuthentication',  # ✅ Optional for session-based login
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': PAGE_SIZE
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=2),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

# image configs
IMAGE_ALLOWED_EXTENSIONS = ['.jpg', '.jpeg', '.png']
IMAGE_MAX_UPLOAD_SIZE = 2 * 1024 * 1024  # 2MB

# upload path
AVATAR_PATH = os.getenv('AVATAR_PATH', 'avatars/')
AVATAR_BACKGROUND_PATH = os.getenv('AVATAR_BACKGROUND_PATH', 'avatars/backgrounds/')
POST_IMAGES_PATH = os.getenv('POST_IMAGES_PATH', 'post_images/')

#one_signal notification config
ONESIGNAL_APP_ID = os.getenv('ONESIGNAL_APP_ID','your_onesignal_app_id')
ONESIGNAL_API_KEY = os.getenv('ONESIGNAL_API_KEY', 'your_onesignal_api_key')

#gpt_config
GPT_API_KEY = os.getenv('GPT_API_KEY', 'gpt_api_key')

# Celery settings
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://redis:6379/0')
CELERY_TASK_RESULT_EXPIRES = 3600  # Task results expire in 1 hour
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

# redis config
REDIS_HOST = os.getenv('REDIS_HOST', 'redis')
REDIS_PORT : int = int(os.getenv('REDIS_PORT', '6379'))
REDIS_DB : int = int(os.getenv('REDIS_DB', 0))

# minio config
MINIO_ENDPOINT: str = os.getenv("MINIO_ENDPOINT", "https://MY-MINIO-REGISTERY-ADDRESS")
MINIO_ACCESS_KEY: str = os.getenv("MINIO_ACCESS_KEY", "my access key")
MINIO_SECRET_KEY: str = os.getenv("MINIO_SECRET_KEY", "my secret key")
MINIO_BUCKET: str = os.getenv("MINIO_BUCKET", "my minio buket")

# kaveh negar paths
KAVENEGAR_BASE_URL = os.getenv('KAVENEGAR_BASE_URL', 'http://api.kavenegar.com/v1/')
KAVENEGAR_SEND_SMS_PATH = os.getenv('KAVENEGAR_SEND_SMS_PATH', '/sms/send.json')
KAVENEGAR_SENDING_NUMBER = os.getenv('KAVENEGAR_SENDING_NUMBER', '')
KAVENEGAR_API_KEY = os.getenv('KAVENEGAR_API_KEY', '')
OTP_CODE_DIGITS_COUNT:int = os.getenv('OTP_CODE_DIGITS_COUNT', 5)
OTP_CODE_EXPIRE_TIME:int = os.getenv('OTP_CODE_EXPIRE_TIME', 120)